import{g as l,P as h,V as g,i as f,d as w,f as d}from"./appSetting-DUM-gYes.js";import{t as u,m as n}from"./jsonUtils-8UYkkjpY.js";import{d as V}from"./FeatureSet-gDsSYk4j.js";import{m as b,u as S}from"./LayerView-tWafQmVa.js";import{t as _}from"./GraphicContainer-DpvHKb5W.js";import{$ as T}from"./GraphicsView2D-D5O1oqL0.js";import"./UniqueValueRenderer-DYNfFcJp.js";import"./ColorStop-CXcZflTc.js";import"./diffUtils-BpCpUKfm.js";import"./colorRamps-DGLQfJq7.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-DyLkiISh.js";import"./lengthUtils-BLMmU1rC.js";import"./jsonUtils-DYzUgqNb.js";import"./styleUtils-DzyC_Q0p.js";import"./LRUCache-dNFQ3tHS.js";import"./Version-bFyzeYy3.js";import"./FieldsIndex-D-DOX7-n.js";import"./UnknownTimeZone-rOmUr5lk.js";import"./OverrideHelper-DITaCURj.js";import"./colorUtils-DMqZP-dB.js";import"./vec42-MRs2gDDM.js";import"./vec4f64-CCf6w8sj.js";import"./utils-DOMViYRb.js";import"./quantizationUtils-C_5luNnm.js";import"./heatmapUtils-BONFUB-t.js";import"./scaleUtils-B607GZsV.js";import"./Container-BtCntV2A.js";import"./parser-BPoYkW_l.js";import"./highlightReasons-dQlR3qpb.js";import"./definitions-C14Q9bsB.js";import"./enums-CYMvjYBC.js";import"./Texture-CvxlpfIz.js";import"./AGraphicContainer-BW-yr7gP.js";import"./TechniqueInstance-Draq7a5p.js";import"./UpdateTracking2D-DOYTRP5W.js";import"./TurboLine-D4d17SRS.js";import"./enums-BRqP_wXA.js";import"./earcut-CdtGKAi5.js";import"./GeometryUtils-Cha9F0G8.js";import"./OptimizedGeometry-CQuTPb9g.js";import"./Rect-CUzevAry.js";import"./LabelMetric-CN4PBax4.js";import"./Program-4ShQ3Lil.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./labelUtils-DgsTKSM5.js";import"./defaultsJSON-CHAaurhX.js";import"./BindType-BmZEZMMh.js";import"./Util-DtwMY4br.js";import"./constants-D5zmR9t2.js";import"./TileContainer-DQvaOrab.js";import"./WGLContainer-Dku5uj5c.js";import"./ProgramTemplate-DjthLnYW.js";import"./StyleDefinition-pu9RBNlY.js";import"./config-MDUrh2eL.js";import"./featureConversionUtils-0eWMaUya.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./FeatureCommandQueue-J0RrQ8lO.js";import"./vec3f32-nZdmKIgz.js";import"./AttributeStore-lSfRzlhD.js";import"./TimeOnly-BeHjGi75.js";import"./timeSupport-CHHYTJ7O.js";import"./json-Wa8cmqdu.js";import"./normalizeUtilsSync-Bl4Qo5LP.js";let y=class extends b(S){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(t,e){if(!this.graphicsViews.length)return null;const o=this.layer;return this.graphicsViews.reverse().flatMap(r=>{const i=this._popupTemplates.get(r),s=r.hitTest(t);for(const p of s)p.layer=o,p.sourceLayer=o,p.popupTemplate=i;return s}).map(r=>({type:"graphic",graphic:r,layer:o,mapPoint:t}))}update(t){if(this.graphicsViews)for(const e of this.graphicsViews)e.processUpdate(t)}attach(){this.addAttachHandles([l(()=>{var t;return(t=this.layer)==null?void 0:t.featureCollections},t=>{this._clear();for(const{popupInfo:e,featureSet:o,layerDefinition:r}of t){const i=V.fromJSON(o),s=new g(i.features),p=r.drawingInfo,c=e?f.fromJSON(e):null,m=u(p.renderer),a=new T({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:s,renderer:m,container:new _(this.view.featuresTilingScheme)});this._graphicsViewMap[i.geometryType]=a,this._popupTemplates.set(a,c),i.geometryType!=="polygon"||this.layer.polygonSymbol?i.geometryType!=="polyline"||this.layer.lineSymbol?i.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=m.symbol):this.layer.lineSymbol=m.symbol:this.layer.polygonSymbol=m.symbol,this.graphicsViews.push(a),this.container.addChild(a.container)}},h),l(()=>{var t;return(t=this.layer)==null?void 0:t.polygonSymbol},t=>{this._graphicsViewMap.polygon.renderer=new n({symbol:t})},h),l(()=>{var t;return(t=this.layer)==null?void 0:t.lineSymbol},t=>{this._graphicsViewMap.polyline.renderer=new n({symbol:t})},h),l(()=>{var t;return(t=this.layer)==null?void 0:t.pointSymbol},t=>{this._graphicsViewMap.point.renderer=new n({symbol:t})},h)])}detach(){this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const t of this.graphicsViews)t.viewChange()}_clear(){this.container.removeAllChildren();for(const t of this.graphicsViews)t.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};y=w([d("esri.views.2d.layers.GeoRSSLayerView2D")],y);const It=y;export{It as default};
